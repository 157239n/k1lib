# AUTOGENERATED FILE! PLEASE DON'T EDIT
import math, k1lib, matplotlib.pyplot as plt, numpy as np
from itertools import accumulate
def combine(lambdas:list, ratios:list=None) -> callable:
    """Combine multiple different schedules.
    Args:
        ratios: list[float], weighting diferent
            functions. Does not have to add up to 1.
        lambdas: list[callable], functions with 1 
            float input in [0, 1]"""
    if ratios == None: ratios = [1] * len(lambdas)
    ratios = np.array(ratios)
    ratios = ratios / ratios.sum()
    checkpoints = [0] + list(accumulate(ratios))
    def f(x):
        for idx, checkpoint in enumerate(checkpoints):
            if checkpoint > x: break
        a = checkpoints[idx - 1]
        return lambdas[idx - 1]((x - a)/(checkpoints[idx] - a))
    return f
def decorate(f:callable) -> callable:
    """Decorator, transforms f(low, high, x) to f(low, high) -> f(x)."""
    def _f(low, high): return lambda x: f(low, high, x)
    _f.__doc__ = f.__doc__; return _f
class ParamScheduler(k1lib.Callback):
    def __init__(self, param:str, schedule:callable): super().__init__(); self.param = param; self.schedule = schedule
    def startBatch(self):
        if self.model.training:
            for paramGroup in self.opt.param_groups: paramGroup[self.param] = self.schedule(self.progress)
    def _ipython_display_(self):
        print(f"'{self.param}' scheduler")
        x = np.linspace(0, 1, 1000); y = [self.schedule(x) for x in x]; plt.plot(x, y)
@decorate
def linear(low, high, x): return low + x * (high - low)
@decorate
def cosine(low, high, x): return low + (high - low) * (1 + math.cos(math.pi * (1-x))) / 2
def oneCycle(low, high): return combine([cosine(0.8 * low + 0.2 * high, high), cosine(high, low)], [0.3, 0.7])
_en4 = math.e**-3
@decorate
def decay(low, high, x): return (math.exp(-x*4+1) - _en4) / (math.e - _en4) * (high - low) + low
def plateau(low, high): return decay(high, low)