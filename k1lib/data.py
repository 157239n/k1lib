# AUTOGENERATED FILE! PLEASE DON'T EDIT
import torch, math, numpy as np
class Sampler:
    def __init__(self, dataset, batchSize:int):
        """
        Creates a random sampler. `dataset` expected to have __len__() and __getitem__() defined.
        
        Basically, when given a dataset with length n and batch size, this will split
        things up into n/batchSize batches. Then, when indexed by an integer, this will return a range of the dataset
        """
        n = len(dataset)
        self.dataset = dataset
        self.nBatches = math.ceil(n / batchSize)
        self.batchSize = batchSize
        self.idxs = np.random.permutation(n)
    def __len__(self):
        return self.nBatches
    def __getitem__(self, i):
        items = self.idxs[i*self.batchSize:(i+1)*self.batchSize]
        return torch.Tensor([self.dataset[item] for item in items]).T
    def __iter__(self):
        return (self[i] for i in range(self.nBatches))
class DataLoader:
    """
    Represents a data loader, meaning can do stuff like:
    
    >>> for xb in xDataLoader:
    >>>     # do something
    """
    def __init__(self, fGenerator:callable, length:int): self.fGenerator = fGenerator; self.length = length
    def __call__(self): return self.fGenerator()
    def __len__(self): return self.length
    def __iter__(self):
        for elem in self.fGenerator(): yield elem
class Data:
    """Just a shell, containing 2 DataLoaders, `train` and `valid`"""
    def __init__(self, train:DataLoader, valid:DataLoader):
        """Expecting train and valid to each return a generator when called upon"""
        self.train = train; self.valid = valid
    @staticmethod
    def fromDataset(dataset, batchSize, trainSplit=0.8):
        sampler = Sampler(dataset, batchSize); numBatches = len(sampler)
        trainRange = range(math.ceil(trainSplit * numBatches))
        testRange = range(math.ceil(trainSplit * numBatches), numBatches)
        def common(_range):
            return DataLoader(lambda: (sampler[idx] for idx in _range), len(_range))
        return Data(common(trainRange), common(testRange))