# AUTOGENERATED FILE! PLEASE DON'T EDIT
import torch
class Object:
    def __init__(self):
        def raiseException(): raise AttributeError
        self._defaultValueGenerator = raiseException
    @staticmethod
    def fromDict(dict):
        """Creates an object with attributes from a dictionary"""
        answer = Object(); answer.__dict__.update(dict); return answer
    def withAutoDeclare(self, defaultValueGenerator):
        """Sets this Object up so that if a field doesn't
        exist, it will automatically create it with a
        default value."""
        self._defaultValueGenerator = defaultValueGenerator
        return self
    def __getattr__(self, attr):
        if self._defaultValueGenerator != None:
            self.__dict__[attr] = self._defaultValueGenerator()
            return getattr(self, attr)
        raise AttributeError
class CancelRunException(Exception): pass
class CancelEpochException(Exception): pass
class CancelBatchException(Exception): pass
def test(value):
    """Tests if value is True"""
    assert value
def close(a, b):
    """Tests if 2 values are really close to each other"""
    test(torch.allclose(torch.tensor(a), torch.tensor(b)))
def textToHtml(text:str) -> str:
    return text.replace("\n", "<br>").replace(" ", "&nbsp;")
class ListContainer:
    """Represents a list base class. Just for convenience's
    sake. Call _setField() to set the list field where the
    data will come from."""
    def __init__(self): self._setField("_items")
    def _setField(self, field): self.field = field; setattr(self, self.field, []); return self
    def __getitem__(self, idx): return getattr(self, self.field)[idx]
    def __setitem__(self, idx, value): self[idx] = value
    def __delitem__(self, idx): del(self[idx])
def getFirst(x):
    """If `x` is a tuple or list, gets the first
    element. Else return the input."""
    return x[0] if type(x) in [list, tuple] else x