# AUTOGENERATED FILE! PLEASE DON'T EDIT
import k1lib as _k1lib
import matplotlib.pyplot as _plt
class PlotDecorator:
    def __init__(self, sliceablePlot, name):
        self.sliceablePlot = sliceablePlot
        self.name = name
        self.args, self.kwargs = None, None
    def __call__(self, *args, **kwargs):
        self.args = args; self.kwargs = kwargs
        return self.sliceablePlot
    def run(self):
        getattr(_plt, self.name)(*self.args, **self.kwargs)
class SliceablePlot:
    def __init__(self, plotF, slices=[slice(None, None, None)], alphaSlice=None, plotDecorators=[], docs=""):
        self.plotF = plotF
        self.slices = [slices] if type(slices) == slice else slices
        self.alphaSlice = alphaSlice # slice using list of strings or string
        self.docs = docs
        self.plotDecorators = list(plotDecorators)
    @property
    def squeezedSlices(self): return _k1lib.squeeze(self.slices)
    def __getattr__(self, attr):
        if attr.startswith("_"): raise AttributeError()
        dec = PlotDecorator(self, attr); self.plotDecorators.append(dec)
        return dec
    def __getitem__(self, idx):
        if type(idx) == slice:
            return SliceablePlot(self.plotF, [idx], self.alphaSlice, self.plotDecorators, self.docs)
        if type(idx) == tuple and all([type(elem) == slice for elem in idx]):
            return SliceablePlot(self.plotF, idx, self.alphaSlice, self.plotDecorators, self.docs)
        return SliceablePlot(self.plotF, self.squeezedSlices, idx, self.plotDecorators, self.docs)
    def __repr__(self):
        if self.alphaSlice == None: self.plotF(self.squeezedSlices)
        else: self.plotF(self.squeezedSlices, self.alphaSlice)
        for ax in _plt.gcf().get_axes():
            _plt.sca(ax)
            [decorator.run() for decorator in self.plotDecorators]
        _plt.show()
        return f"""Sliceable plot. Can...
- p[a:b]: to focus on a specific range of the plot
- p.yscale("log"): to perform operation as if you're using plt{self.docs}"""