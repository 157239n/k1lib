# AUTOGENERATED FILE! PLEASE DON'T EDIT
from k1lib.callbacks import Callback, Callbacks
import k1lib as k1lib
@k1lib.patch(Callback.cls)
class HookParam(Callback, k1lib.ListContainer):
    """Records means and stds of all parameters. Display
    this in your cell for more."""
    def __init__(self):
        super(HookParam, self).__init__()
    def startRun(self):
        if len(self) == 0: # set things up first time only
            self.clear()
            for name, param in self.model.named_parameters():
                self.append(k1lib.Object.fromDict({"name": name, "param": param, "means": [], "stds": []})
                            .withRepr(f"Param `{name}`. Use `.mean` or `.stds` for detailed data"))
    def startBatch(self):
        for data in self:
            data.means.append(data.param.detach().mean().item())
            data.stds.append(data.param.detach().std().item())
    def __repr__(self):
        s = f", {len(self[0].means)} means and stds each" if len(self) > 0 else ""
        names = "\n".join([f"  {i}. {data.name}" for i, data in enumerate(self)])
        return f"""{super()._reprHead}: {len(self)} params{s}:
{names}

Use...
- cb.plot(): to quickly look at everything
- cb[i]: to view a single param
{super()._reprCan}"""
    def plot(self, _slice:slice=slice(None, None, None), logScale=False):
        logScale = "log" if logScale else "linear"
        def _plot(i, objF, title):
            _plt.subplot(1, 2, i)
            for m in self:
                obj = objF(m)
                _plt.plot(range(len(obj))[_slice], obj[_slice])
            _plt.title(title); _plt.yscale(logScale)
        _plt.figure(figsize=(10, 3), dpi=100)
        _plot(1, lambda m: m.means, "Means")
        _plot(2, lambda m: m.stds, "Stds")
        _plt.figlegend([data.name for data in self], loc='right'); _plt.show()
@k1lib.patch(Callbacks)
def withHookParam(self): return self.append(HookParam())